{"version":3,"sources":["App.js","serviceWorker.js","index.js","PRSC110.png"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","deferredPrompt","type","window","addEventListener","event","console","log","preventDefault","_this2","setState","prompt","react_default","a","createElement","className","src","logo","alt","href","target","rel","onClick","clickHandler","bind","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","arguments","length","undefined","URL","process","origin","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.08a9aadf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './PRSC110.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n\n    this.state = {\n      deferredPrompt: { type: \"nothing\" }\n    }\n\n    window.addEventListener('beforeinstallprompt', (event) => {\n      console.log(\"window listener triggered\");\n      event.preventDefault();\n      console.log(\"event!!!\", event);\n      this.state = {\n        deferredPrompt: event\n      };\n    });\n  }\n\n\n  componentDidMount() {\n\n    console.log(\"component dddddid Mount window listener\");\n    window.addEventListener('beforeinstallprompt', (event) => {\n      console.log(\"window listener triggered\");\n      event.preventDefault();\n      console.log(\"event!!!\", event);\n      this.setState({\n        deferredPrompt: event\n      });\n    });\n  }\n\n  handleScroll() {\n    console.log(\"function triggered after component ddddid mount window listener\");\n  }\n\n  clickHandler() {\n    console.log(\"clickHandler\");\n    console.log(this.state.deferredPrompt.type);\n    this.state.deferredPrompt.prompt();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Hi Mom. Hi Dad. Just spinnin' in ma boat.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"http://www.justin.gent\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Justin's Portfolio\n          </a>\n          <button\n            onClick={this.clickHandler.bind(this)}\n          >\n            Install on Android and add to homescreen\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config = {}) {\n  console.log(\"registering...\", config, navigator);\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/PRSC110.17aa87fd.png\";"],"sourceRoot":""}